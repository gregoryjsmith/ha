blueprint:
  name: Smart Rotary Switch (Event Mode) - Custom Click Actions
  description: >-
    Event-mode only automation for smart rotary switches using Zigbee2MQTT.
    Lets you choose what to do for single, double, and hold actions, and dims/brightens on rotation.

  domain: automation

  input:
    mqtt_topic:
      name: MQTT Topic
      description: The Zigbee2MQTT topic for your rotary switch (e.g., zigbee2mqtt/rotary_switch)
      selector:
        text:

    target_lights:
      name: Target Lights (optional)
      description: Lights to reference in your actions (use !input target_lights in actions)
      default: {}
      selector:
        target:
          entity:
            domain: light

    single_action:
      name: Single Press Action
      selector:
        action:
      default: []

    double_action:
      name: Double Press Action
      selector:
        action:
      default: []

    hold_action:
      name: Hold Action
      selector:
        action:
      default: []

    rotate_step_size:
      name: Rotate Step Size (%)
      description: Brightness change per rotate event (1-50)
      default: 5
      selector:
        number:
          min: 1
          max: 50
          unit_of_measurement: "%"

    rotate_transition:
      name: Rotate Transition (s)
      description: Smoothing transition time applied to rotate changes
      default: 0.2
      selector:
        number:
          min: 0
          max: 5
          step: 0.05
          unit_of_measurement: "s"

mode: restart
max: 10
max_exceeded: silent

trigger:
  - platform: mqtt
    topic: !input mqtt_topic

action:
  - variables:
      payload: "{{ trigger.payload_json if trigger.payload_json is defined else {} }}"
      action: "{{ payload.action }}"
      lights: !input target_lights

      # Resolve selected entities from target (entities, areas, devices)
      _sel_entities: "{{ lights.entity_id | default([]) }}"
      _sel_areas: "{{ lights.area_id | default([]) }}"
      _sel_devices: "{{ lights.device_id | default([]) }}"
      _area_entities: "{{ _sel_areas | map('area_entities') | sum(start=[]) }}"
      _device_entities: "{{ _sel_devices | map('device_entities') | sum(start=[]) }}"
      all_light_entities: "{{ (_sel_entities + _area_entities + _device_entities) | unique | select('match','^light\\.') | list }}"

      # Configs
      _rot_step: "{{ (rotate_step_size | float) }}"
      _rot_transition: "{{ (rotate_transition | float) }}"

  - choose:
      - conditions:
          - "{{ action == 'single' }}"
        sequence: !input single_action

      - conditions:
          - "{{ action == 'double' }}"
        sequence: !input double_action

      - conditions:
          - "{{ action in ['hold', 'long'] }}"
        sequence: !input hold_action

      # Rotate Right -> brighten currently-on lights only (percentage step with clamp)
      - conditions:
          - "{{ action == 'rotate_right' }}"
        sequence:
          - variables:
              _on_lights: "{{ expand(all_light_entities) | selectattr('domain','eq','light') | selectattr('state','eq','on') | map(attribute='entity_id') | list }}"
              _bri_vals: "{{ expand(_on_lights) | map(attribute='attributes.brightness') | list }}"
              _bri_pcts: "{{ _bri_vals | map('float') | map('mul', 100/255) | map('round', 0) | list }}"
              _max_pct: "{{ (_bri_pcts | max(default=0)) | float }}"
              _target_pct: "{{ [1, [100, _max_pct + _rot_step] | min] | max }}"
          - condition: template
            value_template: "{{ _on_lights | length > 0 }}"
          - choose:
              - conditions:
                  - "{{ _max_pct >= (100 - _rot_step) }}"
                sequence:
                  - service: light.turn_on
                    data:
                      entity_id: "{{ _on_lights }}"
                      brightness_pct: "{{ 100 | int }}"
                      transition: "{{ _rot_transition }}"
            default:
              - service: light.turn_on
                data:
                  entity_id: "{{ _on_lights }}"
                  brightness_step_pct: "{{ _rot_step | int }}"
                  transition: "{{ _rot_transition }}"

      # Rotate Left -> dim currently-on lights only (percentage step with clamp)
      - conditions:
          - "{{ action == 'rotate_left' }}"
        sequence:
          - variables:
              _on_lights: "{{ expand(all_light_entities) | selectattr('domain','eq','light') | selectattr('state','eq','on') | map(attribute='entity_id') | list }}"
              _bri_vals: "{{ expand(_on_lights) | map(attribute='attributes.brightness') | list }}"
              _bri_pcts: "{{ _bri_vals | map('float') | map('mul', 100/255) | map('round', 0) | list }}"
              _min_pct: "{{ (_bri_pcts | min(default=100)) | float }}"
              _target_pct: "{{ [1, [100, _min_pct - _rot_step] | min] | max }}"
          - condition: template
            value_template: "{{ _on_lights | length > 0 }}"
          - choose:
              - conditions:
                  - "{{ _min_pct <= (1 + _rot_step) }}"
                sequence:
                  - service: light.turn_on
                    data:
                      entity_id: "{{ _on_lights }}"
                      brightness_pct: "{{ 1 | int }}"
                      transition: "{{ _rot_transition }}"
            default:
              - service: light.turn_on
                data:
                  entity_id: "{{ _on_lights }}"
                  brightness_step_pct: "-{{ _rot_step | int }}"
                  transition: "{{ _rot_transition }}"
