blueprint:
  name: Zigbee2MQTT - Tuya - TS004F Smart Knob - Custom Actions

  description: >-
    This automation adds triggers for all actions of the Tuya TS004F rotary dial remote control.
    It can be used in both Command/Dimmer and Event/Scene modes. Both modes have their own actions.
    In Command/Dimmer mode, the configuration is mostly internal, except for pressing the button.
    In Event/Scene mode, you can select your own actions.
    To change modes, you can press the button three times quickly.
    Sold on AliExpress by brands such as Moes, Girier, etc.

  domain: automation

  input:
    mode:
      name: Automation Mode
      description: "https://www.home-assistant.io/docs/automation/modes/"
      default: restart
      selector:
        select:
          mode: dropdown
          options:
            - single
            - restart
            - queued
            - parallel
    max:
      name: Max Executions Automation
      description: The maximum number of executions that can be run and queued at a time.
      default: 10
      selector:
        number:
          mode: box
          min: 1
          max: 100
    mqtt_topic:
      name: Zigbee2MQTT topic
      description: e.g. zigbee2mqtt/your_knob (must publish JSON with action fields)
      selector:
        text:
    light:
      name: Light (Command/Dimmer mode)
      selector:
        target:
          entity:
            domain: light
    toggle:
      name: Toggle (Command/Dimmer mode)
      selector:
        action:
      default: []
    press_short:
      name: Short Press (Event/Scene mode)
      selector:
        action:
      default: []
    press_double:
      name: Double Press (Event/Scene mode)
      selector:
        action:
      default: []
    press_long:
      name: Long Press (Event/Scene mode)
      selector:
        action:
      default: []
    rotate_left:
      name: Rotate Left (Event/Scene mode)
      selector:
        action:
      default: []
    rotate_right:
      name: Rotate Right (Event/Scene mode)
      selector:
        action:
      default: []

mode: !input mode
max: !input max
max_exceeded: silent

trigger:
  - platform: mqtt
    topic: !input mqtt_topic

action:
  - variables:
      light: !input light
      # Prefer Zigbee2MQTT JSON payload fields; fall back to raw payload string
      payload_obj: "{{ trigger.payload_json if trigger.payload_json is defined else {} }}"
      command: "{{ payload_obj.action | default(trigger.payload) }}"
      # Map common Zigbee2MQTT step/hue/temp fields
      step_size: "{{ payload_obj.action_step_size | default(payload_obj.action_step) | default(0) }}"
      step_direction: "{{ payload_obj.action_step_direction | default(payload_obj.action_direction) | default('') }}"
      transition_time_ds: "{{ payload_obj.action_transition_time | default(0) }}"
      hue_move: "{{ payload_obj.action_move | default(0) }}"
      color_temp_delta: "{{ payload_obj.action_color_temperature_delta | default(0) }}"
      direction: >-
        {% if step_direction in ['up','right','increase'] %} 0
        {% elif step_direction in ['down','left','decrease'] %} 1
        {% elif step_direction in ['warm'] %} 3
        {% else %}
        {% if command in ['brightness_step_up','color_temperature_step_up'] %} 0
        {% elif command in ['brightness_step_down','color_temperature_step_down'] %} 1
        {% else %}
        {% endif %}
        {% endif %}
      value: >-
        {% if step_size %} {{ (step_size | float) / 2 }}
        {% elif color_temp_delta %} {{ color_temp_delta | float }}
        {% else %} 0
        {% endif %}
      speed: >-
        {% if transition_time_ds %} {{ (transition_time_ds | float) / 10 }}
        {% else %} 0
        {% endif %}

  - choose:
      # Command Mode
      - conditions:
          - "{{ command in ['single'] }}"
        sequence: !input toggle

      # Command Mode: Dimming
      - conditions:
          - "{{ command in ['brightness_step_up'] }}"
          - "{{ direction == 0 }}"
        sequence:
          - repeat:
              while:
                - condition: template
                  value_template: "{{ repeat.index < 2 }}"
              sequence:
                - service_template: light.turn_on
                  target: !input light
                  data_template:
                    brightness_step_pct: "{{ value }}"
                    transition: "{{ speed }}"
      - conditions:
          - "{{ command in ['brightness_step_down'] }}"
          - "{{ direction == 1 }}"
        sequence:
          - repeat:
              while:
                - condition: template
                  value_template: "{{ repeat.index < 2 }}"
              sequence:
                - service_template: light.turn_on
                  target: !input light
                  data_template:
                    brightness_step_pct: "{{ - value }}"
                    transition: "{{ speed }}"

      # Command Mode: Color Temperature
      - conditions:
          - "{{ command in ['step_color_temp','color_temperature_step_down'] }}"
          - "{{ direction == 1 }}"
        sequence:
          - repeat:
              while:
                - condition: template
                  value_template: "{{ repeat.index < 2 }}"
              sequence:
                - service_template: light.turn_on
                  target: !input light
                  data_template:
                    color_temp: "{{ ( state_attr( light.entity_id, 'color_temp' ) or 300 ) + value }}"
                    transition: "{{ speed }}"
      - conditions:
          - "{{ command in ['step_color_temp','color_temperature_step_up'] }}"
          - "{{ direction == 3 or direction == 0 }}"
        sequence:
          - repeat:
              while:
                - condition: template
                  value_template: "{{ repeat.index < 2 }}"
              sequence:
                - service_template: light.turn_on
                  target: !input light
                  data_template:
                    color_temp: "{{ ( state_attr( light.entity_id, 'color_temp' ) or 300 ) - value }}"
                    transition: "{{ speed }}"

      # Command Mode: Color Hue
      - conditions:
          - "{{ command in ['hue_move'] }}"
        sequence:
          - repeat:
              while:
                - condition: template
                  value_template: "{{ repeat.index < 24 }}"
              sequence:
                - service_template: light.turn_on
                  target: !input light
                  data_template:
                    hs_color:
                      - "{{ ( value + (state_attr( light.entity_id , 'hs_color' )[0] or 0)) % 360 }}"
                      - 100
                    transition: 0.5
                - delay:
                    hours: 0
                    minutes: 0
                    seconds: 1
                    milliseconds: 0
      - conditions:
          - "{{ command in ['stop'] }}"
        sequence:

      # Event mode: Short Press
      - conditions:
          - "{{ command in ['single'] }}"
        sequence: !input press_short

      # Event mode: Double Press
      - conditions:
          - "{{ command in ['double'] }}"
        sequence: !input press_double

      # Event mode: Long Press
      - conditions:
          - "{{ command in ['hold','long'] }}"
        sequence: !input press_long

      # Event mode: Rotate Left
      - conditions:
          - "{{ command in ['left','rotate_left'] }}"
        sequence: !input rotate_left

      # Event mode: Rotate Right
      - conditions:
          - "{{ command in ['right','rotate_right'] }}"
        sequence: !input rotate_right
